version: 2.1
orbs:
  win: circleci/windows@1.0.0
commands:
  install_system_deps:
    description: Install system dependencies
    steps:
      - run:
          name: Install system dependencies
          command: >
            apt-get update &&
            apt-get install -y build-essential clang cmake curl git libssl-dev lcov default-jdk maven
  build:
    description: Build the library
    parameters:
      build_type:
        description: Build type
        type: enum
        enum: ["Debug", "Release"]
      compiler:
        description: The compiler to use
        type: enum
        enum: ["gcc", "clang"]
      coverage:
        description: Build with coverage support
        type: enum
        enum: ["ON", "OFF"]
        default: "OFF"
    steps:
      - run:
          name: CMake configure
          working_directory: build
          command: >
            flags="-Wall -Wextra -Wno-unused-parameter" &&
            if [ "<< parameters.compiler >>" = "gcc" ]; then flags="${flags} -Wno-format-truncation"; fi &&
            if [ "<< parameters.compiler >>" = "gcc" ]; then c_compiler="gcc" && cxx_compiler="g++"; else c_compiler="clang" && cxx_compiler="clang++"; fi &&
            cmake
            -DDNP3_EVERYTHING=ON
            -DDNP3_COVERAGE=<< parameters.coverage >>
            -DCMAKE_BUILD_TYPE=<< parameters.build_type >>
            -DCMAKE_C_COMPILER="${c_compiler}"
            -DCMAKE_CXX_COMPILER="${cxx_compiler}"
            -DCMAKE_CXX_FLAGS="${flags}"
            ..
      - run:
          name: CMake build
          working_directory: build
          command: >
            if [ "<< parameters.coverage >>" = "ON" ]; then target="coverage"; else target="all"; fi &&
            cmake --build . --target ${target} --parallel 4
  coverage:
      description: Code coverage
      steps:
        - run:
            name: Code coverage
            working_directory: build
            command: bash <(curl -s https://codecov.io/bash) -f coverage.info.cleaned
  test:
    description: Run the unit tests
    steps:
      - run:
          name: Run the C++ unit tests
          working_directory: build
          command: ctest -VV
      - run:
          name: Run the Java unit tests
          working_directory: java
          command: >
            export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/project/build/java &&
            export JAVA_HOME=$(readlink -f /usr/bin/javac | sed "s:/bin/javac::") &&
            mvn verify
  windows_steps:
    description: Windows build
    parameters:
      architecture:
        description: Architecture to build for
        type: enum
        enum: ["Win32", "x64"]
    steps:
      - run:
          name: Install system dependencies
          command: >
            if("<< parameters.architecture >>" -eq "Win32") { $flag = "--x86" } else { $flag = "" };
            choco install "$flag" cmake.portable openssl jdk8 maven; refreshenv
      - checkout
      - run:
          name: CMake configure
          working_directory: build
          command: >
            cmake -A << parameters.architecture >>
            -DDNP3_EVERYTHING=ON
            -DCMAKE_BUILD_TYPE=Release
            ..
      - run:
          name: CMake build
          working_directory: build
          command: cmake --build . --config Release --parallel 4
      - run:
          name: Run the C++ unit tests
          working_directory: build
          command: ctest -VV -C Release
      - run:
          name: Run the Java unit tests
          working_directory: java
          command: >
            $env:Path += ";C:\Users\circleci\project\build\java\Release";
            mvn verify
jobs:
  gcc-debug:
    docker:
      - image: debian:buster
    steps:
      - install_system_deps
      - checkout
      - build:
          compiler: gcc
          build_type: Debug
          coverage: "ON"
      - coverage
  gcc-release:
    docker:
      - image: debian:buster
    steps:
      - install_system_deps
      - checkout
      - build:
          compiler: gcc
          build_type: Release
      - test
  clang-debug:
    docker:
      - image: debian:buster
    steps:
      - install_system_deps
      - checkout
      - build:
          compiler: clang
          build_type: Debug
      - test
  clang-release:
    docker:
      - image: debian:buster
    steps:
      - install_system_deps
      - checkout
      - build:
          compiler: clang
          build_type: Release
      - test
  windows-x86:
    executor:
      name: win/vs2019
      shell: powershell.exe
    steps:
      - windows_steps:
          architecture: "Win32"
  windows-x64:
    executor:
      name: win/vs2019
      shell: powershell.exe
    steps:
      - windows_steps:
          architecture: "x64"
workflows:
  version: 2
  build_and_test:
    jobs:
      - gcc-debug
      - gcc-release
      - clang-debug
      - clang-release
      - windows-x86
      - windows-x64
